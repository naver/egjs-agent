{"version":3,"file":"agent.min.js","sources":["../src/utils.ts","../src/presets.ts","../src/userAgent.ts","../src/userAgentData.ts","../src/agent.ts","../src/index.umd.ts"],"sourcesContent":["import { PresetInfo, PresetResult, NavigatorUABrandVersion } from \"./types\";\n\nexport function some<T>(arr: T[], callback: (value: T, index: number) => any): boolean {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return true;\n        }\n    }\n\n    return false;\n}\nexport function find<T>(arr: T[], callback: (value: T, index: number) => any): T | null {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return arr[i];\n        }\n    }\n    return null;\n}\nexport function getUserAgentString(agent?: string): string {\n    let userAgent = agent;\n    if (typeof userAgent === \"undefined\") {\n        if (typeof navigator === \"undefined\" || !navigator) {\n            return \"\";\n        }\n\n        userAgent = navigator.userAgent || \"\";\n    }\n    return userAgent!.toLowerCase();\n}\nexport function execRegExp(pattern: string, text: string): RegExpExecArray | null {\n    try {\n        return new RegExp(pattern, \"g\").exec(text);\n    } catch (e) {\n        return null;\n    }\n}\nexport function hasUserAgentData(): boolean {\n    if (typeof navigator === \"undefined\" || !navigator || !navigator.userAgentData) {\n        return false;\n    }\n    const userAgentData = navigator.userAgentData;\n    const brands = (userAgentData.brands || userAgentData.uaList);\n\n    return !!(brands && brands.length);\n}\nexport function findVersion(versionTest: string, userAgent: string): string {\n    const result = execRegExp(`(${versionTest})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))`, userAgent);\n\n    return result ? result[3] : \"\";\n}\nexport function convertVersion(text: string): string {\n    return text.replace(/_/g, \".\");\n}\nexport function findPreset(presets: PresetInfo[], userAgent: string): PresetResult {\n    let userPreset: PresetInfo | null = null;\n    let version = \"-1\";\n\n    some(presets, preset => {\n        const result = execRegExp(`(${preset.test})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?`, userAgent);\n\n        if (!result || preset.brand) {\n            return false;\n        }\n        userPreset = preset;\n        version = result[3] || \"-1\";\n\n        if (preset.versionAlias) {\n            version = preset.versionAlias;\n        } else if (preset.versionTest) {\n            version = findVersion(preset.versionTest.toLowerCase(), userAgent) || version;\n        }\n        version = convertVersion(version);\n        return true;\n    });\n\n    return {\n        preset: userPreset,\n        version,\n    };\n}\nexport function findPresetBrand(presets: PresetInfo[], brands: NavigatorUABrandVersion[]): NavigatorUABrandVersion {\n    const brandInfo = {\n        brand: \"\",\n        version: \"-1\",\n    };\n    some(presets, preset => {\n        const result = findBrand(brands, preset);\n\n        if (!result) {\n            return false;\n        }\n\n        brandInfo.brand = preset.id;\n        brandInfo.version = preset.versionAlias || result.version;\n\n        return brandInfo.version !== \"-1\";\n    });\n\n    return brandInfo;\n}\nexport function findBrand(brands: NavigatorUABrandVersion[], preset: PresetInfo): NavigatorUABrandVersion | null {\n    return find(brands, ({ brand }) => {\n        return execRegExp(`${preset.test}`, brand.toLowerCase());\n    });\n}\n","import { PresetInfo } from \"./types\";\n\nexport const BROWSER_PRESETS: PresetInfo[] = [\n    {\n        test: \"phantomjs\",\n        id: \"phantomjs\",\n    },\n    {\n        test: \"whale\",\n        id: \"whale\",\n    }, {\n        test: \"edgios|edge|edg\",\n        id: \"edge\",\n    },\n    {\n        test: \"msie|trident|windows phone\",\n        id: \"ie\",\n        versionTest: \"iemobile|msie|rv\",\n    },\n    {\n        test: \"miuibrowser\",\n        id: \"miui browser\",\n    },\n    {\n        test: \"samsungbrowser\",\n        id: \"samsung internet\",\n    },\n    {\n        test: \"samsung\",\n        id: \"samsung internet\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"chrome|crios\",\n        id: \"chrome\",\n    },\n    {\n        test: \"firefox|fxios\",\n        id: \"firefox\",\n    },\n    {\n        test: \"android\",\n        id: \"android browser\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"safari|iphone|ipad|ipod\",\n        id: \"safari\",\n        versionTest: \"version\",\n    },\n];\n\n// chromium's engine(blink) is based on applewebkit 537.36.\nexport const CHROMIUM_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n        id: \"chrome\",\n        versionTest: \"chrome\",\n    },\n    {\n        test: \"chromium\",\n        id: \"chrome\",\n    },\n    {\n        test: \"whale\",\n        id: \"chrome\",\n        versionAlias: \"-1\",\n        brand: true,\n    },\n];\nexport const WEBKIT_PRESETS: PresetInfo[] = [\n    {\n        test: \"applewebkit\",\n        id: \"webkit\",\n        versionTest: \"applewebkit|safari\",\n    },\n];\nexport const WEBVIEW_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=(iphone|ipad))(?!(.*version))\",\n        id: \"webview\",\n    },\n    {\n        test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n        id: \"webview\",\n    },\n    {\n        // test webview\n        test: \"webview\",\n        id: \"webview\",\n    },\n];\nexport const OS_PRESETS: PresetInfo[] = [\n    {\n        test: \"windows phone\",\n        id: \"windows phone\",\n    },\n    {\n        test: \"windows 2000\",\n        id: \"window\",\n        versionAlias: \"5.0\",\n    },\n    {\n        test: \"windows nt\",\n        id: \"window\",\n    },\n    {\n        test: \"win32|windows\",\n        id: \"window\",\n    },\n    {\n        test: \"iphone|ipad|ipod\",\n        id: \"ios\",\n        versionTest: \"iphone os|cpu os\",\n    },\n    {\n        test: \"macos|macintel|mac os x\",\n        id: \"mac\",\n    },\n    {\n        test: \"android|linux armv81\",\n        id: \"android\",\n    },\n    {\n        test: \"tizen\",\n        id: \"tizen\",\n    },\n    {\n        test: \"webos|web0s\",\n        id: \"webos\",\n    },\n    // {\n    //     test: \"linux|ubuntu|debian\",\n    //     id: \"linux\",\n    //     versionAlias: \"-1\",\n    // },\n];\n","import { AgentInfo } from \"./types\";\nimport { getUserAgentString, findPreset } from \"./utils\";\nimport { WEBVIEW_PRESETS, CHROMIUM_PRESETS, BROWSER_PRESETS, OS_PRESETS, WEBKIT_PRESETS } from \"./presets\";\n\nexport function isWebView(userAgent: string): boolean {\n    return !!findPreset(WEBVIEW_PRESETS, userAgent).preset;\n}\n\nexport function getLegacyAgent(userAgent?: string): AgentInfo {\n    const nextAgent = getUserAgentString(userAgent);\n    const isMobile = !!/mobi/g.exec(nextAgent);\n    const browser = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n        webview: isWebView(nextAgent),\n        chromium: false,\n        chromiumVersion: \"-1\",\n        webkit: false,\n        webkitVersion: \"-1\",\n    };\n    const os = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    const {\n        preset: browserPreset,\n        version: browserVersion,\n    } = findPreset(BROWSER_PRESETS, nextAgent);\n\n    const {\n        preset: osPreset,\n        version: osVersion,\n    } = findPreset(OS_PRESETS, nextAgent);\n\n    const chromiumPreset = findPreset(CHROMIUM_PRESETS, nextAgent);\n\n    browser.chromium = !!chromiumPreset.preset;\n    browser.chromiumVersion = chromiumPreset.version;\n    if (!browser.chromium) {\n        const webkitPreset = findPreset(WEBKIT_PRESETS, nextAgent);\n\n        browser.webkit = !!webkitPreset.preset;\n        browser.webkitVersion = webkitPreset.version;\n    }\n\n    if (osPreset) {\n        os.name = osPreset.id;\n        os.version = osVersion;\n        os.majorVersion = parseInt(osVersion, 10);\n    }\n    if (browserPreset) {\n        browser.name = browserPreset.id;\n        browser.version = browserVersion;\n\n        // Early whale bugs\n        if (browser.webview && os.name === \"ios\" && browser.name !== \"safari\") {\n            browser.webview = false;\n        }\n    }\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: false,\n    };\n}\n","import { UADataValues, AgentInfo, AgentBrowserInfo, AgentOSInfo } from \"./types\";\nimport { some, find, findBrand, convertVersion, findPresetBrand, getUserAgentString } from \"./utils\";\nimport { BROWSER_PRESETS, OS_PRESETS, CHROMIUM_PRESETS, WEBKIT_PRESETS, WEBVIEW_PRESETS } from \"./presets\";\nimport { isWebView } from \"./userAgent\";\n\nexport function getClientHintsAgent(osData?: UADataValues): AgentInfo {\n    const userAgentData = navigator.userAgentData;\n    const brands = [...(userAgentData.uaList || userAgentData.brands)!];\n    const fullVersionList = osData && osData.fullVersionList;\n    const isMobile = userAgentData.mobile || false;\n    const firstBrand = brands[0];\n    const platform = (osData && osData.platform || userAgentData.platform || navigator.platform).toLowerCase();\n    const browser: AgentBrowserInfo = {\n        name: firstBrand.brand,\n        version: firstBrand.version,\n        majorVersion: -1,\n        webkit: false,\n        webkitVersion: \"-1\",\n        chromium: false,\n        chromiumVersion: \"-1\",\n        webview: !!findPresetBrand(WEBVIEW_PRESETS, brands).brand || isWebView(getUserAgentString()),\n    };\n    const os: AgentOSInfo = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    browser.webkit = !browser.chromium && some(WEBKIT_PRESETS, preset => findBrand(brands, preset));\n\n    const chromiumBrand = findPresetBrand(CHROMIUM_PRESETS, brands);\n\n    browser.chromium = !!chromiumBrand.brand;\n    browser.chromiumVersion = chromiumBrand.version;\n    if (!browser.chromium) {\n        const webkitBrand = findPresetBrand(WEBKIT_PRESETS, brands);\n\n        browser.webkit = !!webkitBrand.brand;\n        browser.webkitVersion = webkitBrand.version;\n    }\n\n    const platfomResult = find(OS_PRESETS, preset => {\n        return new RegExp(`${preset.test}`, \"g\").exec(platform);\n    });\n    os.name = platfomResult ? platfomResult.id : \"\";\n\n    if (osData) {\n        os.version = osData.platformVersion;\n    }\n    if (fullVersionList && fullVersionList.length) {\n        const browserBrandByFullVersionList = findPresetBrand(BROWSER_PRESETS, fullVersionList);\n\n        browser.name = browserBrandByFullVersionList.brand || browser.name;\n        browser.version = browserBrandByFullVersionList.version || browser.version;\n    } else {\n        const browserBrand = findPresetBrand(BROWSER_PRESETS, brands);\n\n        browser.name = browserBrand.brand || browser.name;\n        browser.version = browserBrand.brand && osData ? osData.uaFullVersion : browserBrand.version;\n    }\n    if (browser.webkit) {\n        os.name = isMobile ? \"ios\" : \"mac\";\n    }\n    if (os.name === \"ios\" && browser.webview) {\n        browser.version = \"-1\";\n    }\n\n    os.version = convertVersion(os.version);\n    browser.version = convertVersion(browser.version);\n    os.majorVersion = parseInt(os.version, 10);\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: true,\n    };\n}\n","import { AgentInfo } from \"./types\";\nimport { hasUserAgentData } from \"./utils\";\nimport { getClientHintsAgent } from \"./userAgentData\";\nimport { getLegacyAgent } from \"./userAgent\";\n\n/**\n * @namespace eg.agent\n */\n\n/**\n* Extracts accuate browser and operating system information from the user agent string or client hints.\n* @ko 유저 에이전트 문자열 또는 client hints에서 정확한 브라우저와 운영체제 정보를 추출한다.\n* @function eg.agent#getAccurateAgent\n* @param - Callback function to get the accuate agent <ko>정확한 에이전트를 가져오기 위한 callback 함수</ko>\n* @return - get the accuate agent promise. If Promise are not supported, null is returned. <ko> 정확한 에이전트 promise를 가져온다. Promise를 지원 하지 않는 경우, null을 반환한다. </ko>\n* @example\nimport { getAccurateAgent } from \"@egjs/agent\";\n// eg.agent.getAccurateAgent()\ngetAccurateAgent().then(agent => {\n   const { os, browser, isMobile } = agent;\n});\ngetAccurateAgent(agent => {\n    const { os, browser, isMobile } = agent;\n});\n*/\nexport function getAccurateAgent(callback?: (result: AgentInfo) => void): Promise<AgentInfo> | null {\n    if (hasUserAgentData()) {\n        return navigator.userAgentData.getHighEntropyValues([\n            \"architecture\",\n            \"model\",\n            \"platform\",\n            \"platformVersion\",\n            \"uaFullVersion\",\n            \"fullVersionList\",\n        ]).then(info => {\n            const agentInfo = getClientHintsAgent(info);\n\n            callback && callback(agentInfo);\n            return agentInfo;\n        });\n    }\n    callback && callback(agent());\n    if (typeof Promise === \"undefined\" || !Promise) {\n        return null;\n    }\n    return Promise.resolve(agent());\n}\n\n\n\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param - user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return - agent Info <ko> 에이전트 정보 </ko>\n * @example\nimport agent from \"@egjs/agent\";\n// eg.agent();\nconst { os, browser, isMobile } = agent();\n */\nfunction agent(userAgent?: string): AgentInfo {\n    if (typeof userAgent === \"undefined\" && hasUserAgentData()) {\n        return getClientHintsAgent();\n    } else {\n        return getLegacyAgent(userAgent);\n    }\n}\nexport { getLegacyAgent };\n\nexport default agent;\n\nexport * from \"./types\";\n","import agent, * as modules from \"./agent\";\n\nfor (const name in modules) {\n    (agent as any)[name] = (modules as any)[name];\n}\n\nexport default agent;\n"],"names":["some","arr","callback","length","i","find","getUserAgentString","agent","userAgent","navigator","toLowerCase","execRegExp","pattern","text","RegExp","exec","e","hasUserAgentData","userAgentData","brands","uaList","convertVersion","replace","findPreset","presets","userPreset","version","preset","result","test","brand","versionAlias","versionTest","findVersion","findPresetBrand","brandInfo","findBrand","id","_a","BROWSER_PRESETS","CHROMIUM_PRESETS","WEBKIT_PRESETS","WEBVIEW_PRESETS","OS_PRESETS","isWebView","getLegacyAgent","nextAgent","isMobile","browser","name","majorVersion","webview","chromium","chromiumVersion","webkit","webkitVersion","os","browserPreset","browserVersion","_b","osPreset","osVersion","chromiumPreset","webkitPreset","parseInt","isHints","getClientHintsAgent","osData","fullVersionList","mobile","firstBrand","platform","chromiumBrand","webkitBrand","platfomResult","platformVersion","browserBrandByFullVersionList","browserBrand","uaFullVersion","getHighEntropyValues","then","info","agentInfo","Promise","resolve","modules"],"mappings":"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"}